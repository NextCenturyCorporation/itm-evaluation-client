# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainDemographics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'military_disposition': 'MilitaryDispositionEnum',
        'military_branch': 'MilitaryBranchEnum',
        'rank': 'MilitaryRankEnum',
        'rank_title': 'MilitaryRankTitleEnum',
        'skills': 'list[Skills]',
        'mission_importance': 'MissionImportanceEnum'
    }

    attribute_map = {
        'military_disposition': 'military_disposition',
        'military_branch': 'military_branch',
        'rank': 'rank',
        'rank_title': 'rank_title',
        'skills': 'skills',
        'mission_importance': 'mission_importance'
    }

    def __init__(self, military_disposition=None, military_branch=None, rank=None, rank_title=None, skills=None, mission_importance=None):  # noqa: E501
        """DomainDemographics - a model defined in Swagger"""  # noqa: E501
        self._military_disposition = None
        self._military_branch = None
        self._rank = None
        self._rank_title = None
        self._skills = None
        self._mission_importance = None
        self.discriminator = None
        if military_disposition is not None:
            self.military_disposition = military_disposition
        if military_branch is not None:
            self.military_branch = military_branch
        if rank is not None:
            self.rank = rank
        if rank_title is not None:
            self.rank_title = rank_title
        if skills is not None:
            self.skills = skills
        if mission_importance is not None:
            self.mission_importance = mission_importance

    @property
    def military_disposition(self):
        """Gets the military_disposition of this DomainDemographics.  # noqa: E501


        :return: The military_disposition of this DomainDemographics.  # noqa: E501
        :rtype: MilitaryDispositionEnum
        """
        return self._military_disposition

    @military_disposition.setter
    def military_disposition(self, military_disposition):
        """Sets the military_disposition of this DomainDemographics.


        :param military_disposition: The military_disposition of this DomainDemographics.  # noqa: E501
        :type: MilitaryDispositionEnum
        """

        self._military_disposition = military_disposition

    @property
    def military_branch(self):
        """Gets the military_branch of this DomainDemographics.  # noqa: E501


        :return: The military_branch of this DomainDemographics.  # noqa: E501
        :rtype: MilitaryBranchEnum
        """
        return self._military_branch

    @military_branch.setter
    def military_branch(self, military_branch):
        """Sets the military_branch of this DomainDemographics.


        :param military_branch: The military_branch of this DomainDemographics.  # noqa: E501
        :type: MilitaryBranchEnum
        """

        self._military_branch = military_branch

    @property
    def rank(self):
        """Gets the rank of this DomainDemographics.  # noqa: E501


        :return: The rank of this DomainDemographics.  # noqa: E501
        :rtype: MilitaryRankEnum
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this DomainDemographics.


        :param rank: The rank of this DomainDemographics.  # noqa: E501
        :type: MilitaryRankEnum
        """

        self._rank = rank

    @property
    def rank_title(self):
        """Gets the rank_title of this DomainDemographics.  # noqa: E501


        :return: The rank_title of this DomainDemographics.  # noqa: E501
        :rtype: MilitaryRankTitleEnum
        """
        return self._rank_title

    @rank_title.setter
    def rank_title(self, rank_title):
        """Sets the rank_title of this DomainDemographics.


        :param rank_title: The rank_title of this DomainDemographics.  # noqa: E501
        :type: MilitaryRankTitleEnum
        """

        self._rank_title = rank_title

    @property
    def skills(self):
        """Gets the skills of this DomainDemographics.  # noqa: E501

        A list of pairs of skill type and descriptive skill level  # noqa: E501

        :return: The skills of this DomainDemographics.  # noqa: E501
        :rtype: list[Skills]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this DomainDemographics.

        A list of pairs of skill type and descriptive skill level  # noqa: E501

        :param skills: The skills of this DomainDemographics.  # noqa: E501
        :type: list[Skills]
        """

        self._skills = skills

    @property
    def mission_importance(self):
        """Gets the mission_importance of this DomainDemographics.  # noqa: E501


        :return: The mission_importance of this DomainDemographics.  # noqa: E501
        :rtype: MissionImportanceEnum
        """
        return self._mission_importance

    @mission_importance.setter
    def mission_importance(self, mission_importance):
        """Sets the mission_importance of this DomainDemographics.


        :param mission_importance: The mission_importance of this DomainDemographics.  # noqa: E501
        :type: MissionImportanceEnum
        """

        self._mission_importance = mission_importance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainDemographics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainDemographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
