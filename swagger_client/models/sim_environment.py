# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimEnvironment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unstructured': 'str',
        'type': 'SimEnvironmentTypeEnum',
        'weather': 'WeatherTypeEnum',
        'terrain': 'TerrainTypeEnum',
        'flora': 'FloraTypeEnum',
        'fauna': 'FaunaTypeEnum',
        'temperature': 'float',
        'humidity': 'float',
        'lighting': 'LightingTypeEnum',
        'visibility': 'VisibilityTypeEnum',
        'noise_ambient': 'AmbientNoiseEnum',
        'noise_peak': 'PeakNoiseEnum'
    }

    attribute_map = {
        'unstructured': 'unstructured',
        'type': 'type',
        'weather': 'weather',
        'terrain': 'terrain',
        'flora': 'flora',
        'fauna': 'fauna',
        'temperature': 'temperature',
        'humidity': 'humidity',
        'lighting': 'lighting',
        'visibility': 'visibility',
        'noise_ambient': 'noise_ambient',
        'noise_peak': 'noise_peak'
    }

    def __init__(self, unstructured=None, type=None, weather=None, terrain=None, flora=None, fauna=None, temperature=None, humidity=None, lighting=None, visibility=None, noise_ambient=None, noise_peak=None):  # noqa: E501
        """SimEnvironment - a model defined in Swagger"""  # noqa: E501
        self._unstructured = None
        self._type = None
        self._weather = None
        self._terrain = None
        self._flora = None
        self._fauna = None
        self._temperature = None
        self._humidity = None
        self._lighting = None
        self._visibility = None
        self._noise_ambient = None
        self._noise_peak = None
        self.discriminator = None
        if unstructured is not None:
            self.unstructured = unstructured
        self.type = type
        if weather is not None:
            self.weather = weather
        if terrain is not None:
            self.terrain = terrain
        if flora is not None:
            self.flora = flora
        if fauna is not None:
            self.fauna = fauna
        if temperature is not None:
            self.temperature = temperature
        if humidity is not None:
            self.humidity = humidity
        if lighting is not None:
            self.lighting = lighting
        if visibility is not None:
            self.visibility = visibility
        if noise_ambient is not None:
            self.noise_ambient = noise_ambient
        if noise_peak is not None:
            self.noise_peak = noise_peak

    @property
    def unstructured(self):
        """Gets the unstructured of this SimEnvironment.  # noqa: E501

        Natural language, plain text description of the environment  # noqa: E501

        :return: The unstructured of this SimEnvironment.  # noqa: E501
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this SimEnvironment.

        Natural language, plain text description of the environment  # noqa: E501

        :param unstructured: The unstructured of this SimEnvironment.  # noqa: E501
        :type: str
        """

        self._unstructured = unstructured

    @property
    def type(self):
        """Gets the type of this SimEnvironment.  # noqa: E501


        :return: The type of this SimEnvironment.  # noqa: E501
        :rtype: SimEnvironmentTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimEnvironment.


        :param type: The type of this SimEnvironment.  # noqa: E501
        :type: SimEnvironmentTypeEnum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def weather(self):
        """Gets the weather of this SimEnvironment.  # noqa: E501


        :return: The weather of this SimEnvironment.  # noqa: E501
        :rtype: WeatherTypeEnum
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this SimEnvironment.


        :param weather: The weather of this SimEnvironment.  # noqa: E501
        :type: WeatherTypeEnum
        """

        self._weather = weather

    @property
    def terrain(self):
        """Gets the terrain of this SimEnvironment.  # noqa: E501


        :return: The terrain of this SimEnvironment.  # noqa: E501
        :rtype: TerrainTypeEnum
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain):
        """Sets the terrain of this SimEnvironment.


        :param terrain: The terrain of this SimEnvironment.  # noqa: E501
        :type: TerrainTypeEnum
        """

        self._terrain = terrain

    @property
    def flora(self):
        """Gets the flora of this SimEnvironment.  # noqa: E501


        :return: The flora of this SimEnvironment.  # noqa: E501
        :rtype: FloraTypeEnum
        """
        return self._flora

    @flora.setter
    def flora(self, flora):
        """Sets the flora of this SimEnvironment.


        :param flora: The flora of this SimEnvironment.  # noqa: E501
        :type: FloraTypeEnum
        """

        self._flora = flora

    @property
    def fauna(self):
        """Gets the fauna of this SimEnvironment.  # noqa: E501


        :return: The fauna of this SimEnvironment.  # noqa: E501
        :rtype: FaunaTypeEnum
        """
        return self._fauna

    @fauna.setter
    def fauna(self, fauna):
        """Sets the fauna of this SimEnvironment.


        :param fauna: The fauna of this SimEnvironment.  # noqa: E501
        :type: FaunaTypeEnum
        """

        self._fauna = fauna

    @property
    def temperature(self):
        """Gets the temperature of this SimEnvironment.  # noqa: E501

        numerical temperature in degrees Fahrenheit  # noqa: E501

        :return: The temperature of this SimEnvironment.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SimEnvironment.

        numerical temperature in degrees Fahrenheit  # noqa: E501

        :param temperature: The temperature of this SimEnvironment.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def humidity(self):
        """Gets the humidity of this SimEnvironment.  # noqa: E501

        Numerical relative humidity, in percentage  # noqa: E501

        :return: The humidity of this SimEnvironment.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this SimEnvironment.

        Numerical relative humidity, in percentage  # noqa: E501

        :param humidity: The humidity of this SimEnvironment.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def lighting(self):
        """Gets the lighting of this SimEnvironment.  # noqa: E501


        :return: The lighting of this SimEnvironment.  # noqa: E501
        :rtype: LightingTypeEnum
        """
        return self._lighting

    @lighting.setter
    def lighting(self, lighting):
        """Sets the lighting of this SimEnvironment.


        :param lighting: The lighting of this SimEnvironment.  # noqa: E501
        :type: LightingTypeEnum
        """

        self._lighting = lighting

    @property
    def visibility(self):
        """Gets the visibility of this SimEnvironment.  # noqa: E501


        :return: The visibility of this SimEnvironment.  # noqa: E501
        :rtype: VisibilityTypeEnum
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this SimEnvironment.


        :param visibility: The visibility of this SimEnvironment.  # noqa: E501
        :type: VisibilityTypeEnum
        """

        self._visibility = visibility

    @property
    def noise_ambient(self):
        """Gets the noise_ambient of this SimEnvironment.  # noqa: E501


        :return: The noise_ambient of this SimEnvironment.  # noqa: E501
        :rtype: AmbientNoiseEnum
        """
        return self._noise_ambient

    @noise_ambient.setter
    def noise_ambient(self, noise_ambient):
        """Sets the noise_ambient of this SimEnvironment.


        :param noise_ambient: The noise_ambient of this SimEnvironment.  # noqa: E501
        :type: AmbientNoiseEnum
        """

        self._noise_ambient = noise_ambient

    @property
    def noise_peak(self):
        """Gets the noise_peak of this SimEnvironment.  # noqa: E501


        :return: The noise_peak of this SimEnvironment.  # noqa: E501
        :rtype: PeakNoiseEnum
        """
        return self._noise_peak

    @noise_peak.setter
    def noise_peak(self, noise_peak):
        """Sets the noise_peak of this SimEnvironment.


        :param noise_peak: The noise_peak of this SimEnvironment.  # noqa: E501
        :type: PeakNoiseEnum
        """

        self._noise_peak = noise_peak

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimEnvironment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimEnvironment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
