# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_id': 'str',
        'kdma_association': 'dict(str, str)',
        'scenario_id': 'str',
        'action_type': 'str',
        'casualty_id': 'str',
        'unstructured': 'str',
        'justification': 'str',
        'parameters': 'dict(str, str)'
    }

    attribute_map = {
        'action_id': 'action_id',
        'kdma_association': 'kdma_association',
        'scenario_id': 'scenario_id',
        'action_type': 'action_type',
        'casualty_id': 'casualty_id',
        'unstructured': 'unstructured',
        'justification': 'justification',
        'parameters': 'parameters'
    }

    def __init__(self, action_id=None, kdma_association=None, scenario_id=None, action_type=None, casualty_id=None, unstructured=None, justification=None, parameters=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        self._action_id = None
        self._kdma_association = None
        self._scenario_id = None
        self._action_type = None
        self._casualty_id = None
        self._unstructured = None
        self._justification = None
        self._parameters = None
        self.discriminator = None
        self.action_id = action_id
        if kdma_association is not None:
            self.kdma_association = kdma_association
        self.scenario_id = scenario_id
        self.action_type = action_type
        if casualty_id is not None:
            self.casualty_id = casualty_id
        if unstructured is not None:
            self.unstructured = unstructured
        if justification is not None:
            self.justification = justification
        if parameters is not None:
            self.parameters = parameters

    @property
    def action_id(self):
        """Gets the action_id of this Action.  # noqa: E501

        action ID  # noqa: E501

        :return: The action_id of this Action.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this Action.

        action ID  # noqa: E501

        :param action_id: The action_id of this Action.  # noqa: E501
        :type: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def kdma_association(self):
        """Gets the kdma_association of this Action.  # noqa: E501

        key-value pairs containing additional action-specific parameters  # noqa: E501

        :return: The kdma_association of this Action.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._kdma_association

    @kdma_association.setter
    def kdma_association(self, kdma_association):
        """Sets the kdma_association of this Action.

        key-value pairs containing additional action-specific parameters  # noqa: E501

        :param kdma_association: The kdma_association of this Action.  # noqa: E501
        :type: dict(str, str)
        """

        self._kdma_association = kdma_association

    @property
    def scenario_id(self):
        """Gets the scenario_id of this Action.  # noqa: E501

        scenario ID this probe is for  # noqa: E501

        :return: The scenario_id of this Action.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this Action.

        scenario ID this probe is for  # noqa: E501

        :param scenario_id: The scenario_id of this Action.  # noqa: E501
        :type: str
        """
        if scenario_id is None:
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def action_type(self):
        """Gets the action_type of this Action.  # noqa: E501

        The action type taken from a controlled vocabulary.  # noqa: E501

        :return: The action_type of this Action.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this Action.

        The action type taken from a controlled vocabulary.  # noqa: E501

        :param action_type: The action_type of this Action.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        allowed_values = ["APPLY_TREATMENT", "DIRECT_MOBILE_CASUALTIES", "CHECK_ALL_VITALS", "CHECK_PULSE", "CHECK_RESPIRATION", "SITREP", "TAG_CASUALTY", "MOVE_TO_EVAC"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def casualty_id(self):
        """Gets the casualty_id of this Action.  # noqa: E501

        The ID of the casualty being acted upon  # noqa: E501

        :return: The casualty_id of this Action.  # noqa: E501
        :rtype: str
        """
        return self._casualty_id

    @casualty_id.setter
    def casualty_id(self, casualty_id):
        """Sets the casualty_id of this Action.

        The ID of the casualty being acted upon  # noqa: E501

        :param casualty_id: The casualty_id of this Action.  # noqa: E501
        :type: str
        """

        self._casualty_id = casualty_id

    @property
    def unstructured(self):
        """Gets the unstructured of this Action.  # noqa: E501

        a plain text unstructured description of the action  # noqa: E501

        :return: The unstructured of this Action.  # noqa: E501
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this Action.

        a plain text unstructured description of the action  # noqa: E501

        :param unstructured: The unstructured of this Action.  # noqa: E501
        :type: str
        """

        self._unstructured = unstructured

    @property
    def justification(self):
        """Gets the justification of this Action.  # noqa: E501

        A justification of the action taken  # noqa: E501

        :return: The justification of this Action.  # noqa: E501
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :param justification: The justification of this Action.  # noqa: E501
        :type: str
        """

        self._justification = justification

    @property
    def parameters(self):
        """Gets the parameters of this Action.  # noqa: E501

        key-value pairs containing additional action-specific parameters  # noqa: E501

        :return: The parameters of this Action.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Action.

        key-value pairs containing additional action-specific parameters  # noqa: E501

        :param parameters: The parameters of this Action.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
