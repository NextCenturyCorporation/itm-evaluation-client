# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseCharacter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'unstructured': 'str',
        'demographics': 'Demographics',
        'rapport': 'RapportEnum',
        'unseen': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'unstructured': 'unstructured',
        'demographics': 'demographics',
        'rapport': 'rapport',
        'unseen': 'unseen'
    }

    def __init__(self, id=None, name=None, unstructured=None, demographics=None, rapport=None, unseen=False):  # noqa: E501
        """BaseCharacter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._unstructured = None
        self._demographics = None
        self._rapport = None
        self._unseen = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.unstructured = unstructured
        self.demographics = demographics
        if rapport is not None:
            self.rapport = rapport
        if unseen is not None:
            self.unseen = unseen

    @property
    def id(self):
        """Gets the id of this BaseCharacter.  # noqa: E501

        A unique character ID throughout the scenario  # noqa: E501

        :return: The id of this BaseCharacter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseCharacter.

        A unique character ID throughout the scenario  # noqa: E501

        :param id: The id of this BaseCharacter.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this BaseCharacter.  # noqa: E501

        display name, as in a dashboard  # noqa: E501

        :return: The name of this BaseCharacter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseCharacter.

        display name, as in a dashboard  # noqa: E501

        :param name: The name of this BaseCharacter.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def unstructured(self):
        """Gets the unstructured of this BaseCharacter.  # noqa: E501

        Natural language, plain text description of the character  # noqa: E501

        :return: The unstructured of this BaseCharacter.  # noqa: E501
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this BaseCharacter.

        Natural language, plain text description of the character  # noqa: E501

        :param unstructured: The unstructured of this BaseCharacter.  # noqa: E501
        :type: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def demographics(self):
        """Gets the demographics of this BaseCharacter.  # noqa: E501


        :return: The demographics of this BaseCharacter.  # noqa: E501
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this BaseCharacter.


        :param demographics: The demographics of this BaseCharacter.  # noqa: E501
        :type: Demographics
        """
        if demographics is None:
            raise ValueError("Invalid value for `demographics`, must not be `None`")  # noqa: E501

        self._demographics = demographics

    @property
    def rapport(self):
        """Gets the rapport of this BaseCharacter.  # noqa: E501


        :return: The rapport of this BaseCharacter.  # noqa: E501
        :rtype: RapportEnum
        """
        return self._rapport

    @rapport.setter
    def rapport(self, rapport):
        """Sets the rapport of this BaseCharacter.


        :param rapport: The rapport of this BaseCharacter.  # noqa: E501
        :type: RapportEnum
        """

        self._rapport = rapport

    @property
    def unseen(self):
        """Gets the unseen of this BaseCharacter.  # noqa: E501

        whether or not this character is visible in the scene or merely heard or reported about from a nearby location  # noqa: E501

        :return: The unseen of this BaseCharacter.  # noqa: E501
        :rtype: bool
        """
        return self._unseen

    @unseen.setter
    def unseen(self, unseen):
        """Sets the unseen of this BaseCharacter.

        whether or not this character is visible in the scene or merely heard or reported about from a nearby location  # noqa: E501

        :param unseen: The unseen of this BaseCharacter.  # noqa: E501
        :type: bool
        """

        self._unseen = unseen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseCharacter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseCharacter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
