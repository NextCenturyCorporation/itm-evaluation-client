# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Demographics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'sex': 'DemographicSexEnum',
        'race': 'RaceEnum',
        'military_disposition': 'MilitaryDispositionEnum',
        'military_branch': 'MilitaryBranchEnum',
        'rank': 'MilitaryRankEnum',
        'rank_title': 'MilitaryRankTitleEnum',
        'skills': 'list[Skills]',
        'role': 'CharacterRoleEnum',
        'mission_importance': 'MissionImportanceEnum'
    }

    attribute_map = {
        'age': 'age',
        'sex': 'sex',
        'race': 'race',
        'military_disposition': 'military_disposition',
        'military_branch': 'military_branch',
        'rank': 'rank',
        'rank_title': 'rank_title',
        'skills': 'skills',
        'role': 'role',
        'mission_importance': 'mission_importance'
    }

    def __init__(self, age=None, sex=None, race=None, military_disposition=None, military_branch=None, rank=None, rank_title=None, skills=None, role=None, mission_importance=None):  # noqa: E501
        """Demographics - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._sex = None
        self._race = None
        self._military_disposition = None
        self._military_branch = None
        self._rank = None
        self._rank_title = None
        self._skills = None
        self._role = None
        self._mission_importance = None
        self.discriminator = None
        if age is not None:
            self.age = age
        self.sex = sex
        self.race = race
        if military_disposition is not None:
            self.military_disposition = military_disposition
        if military_branch is not None:
            self.military_branch = military_branch
        if rank is not None:
            self.rank = rank
        if rank_title is not None:
            self.rank_title = rank_title
        if skills is not None:
            self.skills = skills
        if role is not None:
            self.role = role
        if mission_importance is not None:
            self.mission_importance = mission_importance

    @property
    def age(self):
        """Gets the age of this Demographics.  # noqa: E501

        the age of the character, omit if unknown  # noqa: E501

        :return: The age of this Demographics.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Demographics.

        the age of the character, omit if unknown  # noqa: E501

        :param age: The age of this Demographics.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def sex(self):
        """Gets the sex of this Demographics.  # noqa: E501


        :return: The sex of this Demographics.  # noqa: E501
        :rtype: DemographicSexEnum
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Demographics.


        :param sex: The sex of this Demographics.  # noqa: E501
        :type: DemographicSexEnum
        """
        if sex is None:
            raise ValueError("Invalid value for `sex`, must not be `None`")  # noqa: E501

        self._sex = sex

    @property
    def race(self):
        """Gets the race of this Demographics.  # noqa: E501


        :return: The race of this Demographics.  # noqa: E501
        :rtype: RaceEnum
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this Demographics.


        :param race: The race of this Demographics.  # noqa: E501
        :type: RaceEnum
        """
        if race is None:
            raise ValueError("Invalid value for `race`, must not be `None`")  # noqa: E501

        self._race = race

    @property
    def military_disposition(self):
        """Gets the military_disposition of this Demographics.  # noqa: E501


        :return: The military_disposition of this Demographics.  # noqa: E501
        :rtype: MilitaryDispositionEnum
        """
        return self._military_disposition

    @military_disposition.setter
    def military_disposition(self, military_disposition):
        """Sets the military_disposition of this Demographics.


        :param military_disposition: The military_disposition of this Demographics.  # noqa: E501
        :type: MilitaryDispositionEnum
        """

        self._military_disposition = military_disposition

    @property
    def military_branch(self):
        """Gets the military_branch of this Demographics.  # noqa: E501


        :return: The military_branch of this Demographics.  # noqa: E501
        :rtype: MilitaryBranchEnum
        """
        return self._military_branch

    @military_branch.setter
    def military_branch(self, military_branch):
        """Sets the military_branch of this Demographics.


        :param military_branch: The military_branch of this Demographics.  # noqa: E501
        :type: MilitaryBranchEnum
        """

        self._military_branch = military_branch

    @property
    def rank(self):
        """Gets the rank of this Demographics.  # noqa: E501


        :return: The rank of this Demographics.  # noqa: E501
        :rtype: MilitaryRankEnum
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Demographics.


        :param rank: The rank of this Demographics.  # noqa: E501
        :type: MilitaryRankEnum
        """

        self._rank = rank

    @property
    def rank_title(self):
        """Gets the rank_title of this Demographics.  # noqa: E501


        :return: The rank_title of this Demographics.  # noqa: E501
        :rtype: MilitaryRankTitleEnum
        """
        return self._rank_title

    @rank_title.setter
    def rank_title(self, rank_title):
        """Sets the rank_title of this Demographics.


        :param rank_title: The rank_title of this Demographics.  # noqa: E501
        :type: MilitaryRankTitleEnum
        """

        self._rank_title = rank_title

    @property
    def skills(self):
        """Gets the skills of this Demographics.  # noqa: E501

        A list of pairs of skill type and descriptive skill level  # noqa: E501

        :return: The skills of this Demographics.  # noqa: E501
        :rtype: list[Skills]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this Demographics.

        A list of pairs of skill type and descriptive skill level  # noqa: E501

        :param skills: The skills of this Demographics.  # noqa: E501
        :type: list[Skills]
        """

        self._skills = skills

    @property
    def role(self):
        """Gets the role of this Demographics.  # noqa: E501


        :return: The role of this Demographics.  # noqa: E501
        :rtype: CharacterRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Demographics.


        :param role: The role of this Demographics.  # noqa: E501
        :type: CharacterRoleEnum
        """

        self._role = role

    @property
    def mission_importance(self):
        """Gets the mission_importance of this Demographics.  # noqa: E501


        :return: The mission_importance of this Demographics.  # noqa: E501
        :rtype: MissionImportanceEnum
        """
        return self._mission_importance

    @mission_importance.setter
    def mission_importance(self, mission_importance):
        """Sets the mission_importance of this Demographics.


        :param mission_importance: The mission_importance of this Demographics.  # noqa: E501
        :type: MissionImportanceEnum
        """

        self._mission_importance = mission_importance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Demographics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Demographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
