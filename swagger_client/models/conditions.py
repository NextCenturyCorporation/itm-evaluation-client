# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.basic_conditions import BasicConditions  # noqa: F401,E501

class Conditions(BasicConditions):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'character_vitals': 'list[ConditionsCharacterVitals]',
        'supplies': 'list[Supplies]'
    }
    if hasattr(BasicConditions, "swagger_types"):
        swagger_types.update(BasicConditions.swagger_types)

    attribute_map = {
        'character_vitals': 'character_vitals',
        'supplies': 'supplies'
    }
    if hasattr(BasicConditions, "attribute_map"):
        attribute_map.update(BasicConditions.attribute_map)

    def __init__(self, character_vitals=None, supplies=None, *args, **kwargs):  # noqa: E501
        """Conditions - a model defined in Swagger"""  # noqa: E501
        self._character_vitals = None
        self._supplies = None
        self.discriminator = None
        if character_vitals is not None:
            self.character_vitals = character_vitals
        if supplies is not None:
            self.supplies = supplies
        BasicConditions.__init__(self, *args, **kwargs)

    @property
    def character_vitals(self):
        """Gets the character_vitals of this Conditions.  # noqa: E501

        True if any of the specified collection of vital values have been met for the specified character_id  # noqa: E501

        :return: The character_vitals of this Conditions.  # noqa: E501
        :rtype: list[ConditionsCharacterVitals]
        """
        return self._character_vitals

    @character_vitals.setter
    def character_vitals(self, character_vitals):
        """Sets the character_vitals of this Conditions.

        True if any of the specified collection of vital values have been met for the specified character_id  # noqa: E501

        :param character_vitals: The character_vitals of this Conditions.  # noqa: E501
        :type: list[ConditionsCharacterVitals]
        """

        self._character_vitals = character_vitals

    @property
    def supplies(self):
        """Gets the supplies of this Conditions.  # noqa: E501

        True if any of the specified supplies reach or go below the specified quantity  # noqa: E501

        :return: The supplies of this Conditions.  # noqa: E501
        :rtype: list[Supplies]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies):
        """Sets the supplies of this Conditions.

        True if any of the specified supplies reach or go below the specified quantity  # noqa: E501

        :param supplies: The supplies of this Conditions.  # noqa: E501
        :type: list[Supplies]
        """

        self._supplies = supplies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Conditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
