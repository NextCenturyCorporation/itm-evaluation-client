# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Dry Run Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConditionsCharacterVitals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'character_id': 'str',
        'vitals': 'Vitals'
    }

    attribute_map = {
        'character_id': 'character_id',
        'vitals': 'vitals'
    }

    def __init__(self, character_id=None, vitals=None):  # noqa: E501
        """ConditionsCharacterVitals - a model defined in Swagger"""  # noqa: E501
        self._character_id = None
        self._vitals = None
        self.discriminator = None
        self.character_id = character_id
        self.vitals = vitals

    @property
    def character_id(self):
        """Gets the character_id of this ConditionsCharacterVitals.  # noqa: E501

        The ID of the character in question  # noqa: E501

        :return: The character_id of this ConditionsCharacterVitals.  # noqa: E501
        :rtype: str
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this ConditionsCharacterVitals.

        The ID of the character in question  # noqa: E501

        :param character_id: The character_id of this ConditionsCharacterVitals.  # noqa: E501
        :type: str
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")  # noqa: E501

        self._character_id = character_id

    @property
    def vitals(self):
        """Gets the vitals of this ConditionsCharacterVitals.  # noqa: E501


        :return: The vitals of this ConditionsCharacterVitals.  # noqa: E501
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals):
        """Sets the vitals of this ConditionsCharacterVitals.


        :param vitals: The vitals of this ConditionsCharacterVitals.  # noqa: E501
        :type: Vitals
        """
        if vitals is None:
            raise ValueError("Invalid value for `vitals`, must not be `None`")  # noqa: E501

        self._vitals = vitals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionsCharacterVitals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionsCharacterVitals):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
