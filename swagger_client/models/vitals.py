# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vitals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conscious': 'bool',
        'mental_status': 'VitalsMentalStatus',
        'breathing': 'VitalsBreathing',
        'hrpmin': 'int'
    }

    attribute_map = {
        'conscious': 'conscious',
        'mental_status': 'mental_status',
        'breathing': 'breathing',
        'hrpmin': 'hrpmin'
    }

    def __init__(self, conscious=None, mental_status=None, breathing=None, hrpmin=None):  # noqa: E501
        """Vitals - a model defined in Swagger"""  # noqa: E501
        self._conscious = None
        self._mental_status = None
        self._breathing = None
        self._hrpmin = None
        self.discriminator = None
        if conscious is not None:
            self.conscious = conscious
        if mental_status is not None:
            self.mental_status = mental_status
        if breathing is not None:
            self.breathing = breathing
        if hrpmin is not None:
            self.hrpmin = hrpmin

    @property
    def conscious(self):
        """Gets the conscious of this Vitals.  # noqa: E501

        whether or not the casualty is conscious  # noqa: E501

        :return: The conscious of this Vitals.  # noqa: E501
        :rtype: bool
        """
        return self._conscious

    @conscious.setter
    def conscious(self, conscious):
        """Sets the conscious of this Vitals.

        whether or not the casualty is conscious  # noqa: E501

        :param conscious: The conscious of this Vitals.  # noqa: E501
        :type: bool
        """

        self._conscious = conscious

    @property
    def mental_status(self):
        """Gets the mental_status of this Vitals.  # noqa: E501


        :return: The mental_status of this Vitals.  # noqa: E501
        :rtype: VitalsMentalStatus
        """
        return self._mental_status

    @mental_status.setter
    def mental_status(self, mental_status):
        """Sets the mental_status of this Vitals.


        :param mental_status: The mental_status of this Vitals.  # noqa: E501
        :type: VitalsMentalStatus
        """

        self._mental_status = mental_status

    @property
    def breathing(self):
        """Gets the breathing of this Vitals.  # noqa: E501


        :return: The breathing of this Vitals.  # noqa: E501
        :rtype: VitalsBreathing
        """
        return self._breathing

    @breathing.setter
    def breathing(self, breathing):
        """Sets the breathing of this Vitals.


        :param breathing: The breathing of this Vitals.  # noqa: E501
        :type: VitalsBreathing
        """

        self._breathing = breathing

    @property
    def hrpmin(self):
        """Gets the hrpmin of this Vitals.  # noqa: E501

        heart rate in beats per minute  # noqa: E501

        :return: The hrpmin of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._hrpmin

    @hrpmin.setter
    def hrpmin(self, hrpmin):
        """Sets the hrpmin of this Vitals.

        heart rate in beats per minute  # noqa: E501

        :param hrpmin: The hrpmin of this Vitals.  # noqa: E501
        :type: int
        """

        self._hrpmin = hrpmin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vitals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vitals):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
