# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Dry Run Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scene_id': 'str',
        'probe_response': 'ProbeResponse'
    }

    attribute_map = {
        'scene_id': 'scene_id',
        'probe_response': 'probe_response'
    }

    def __init__(self, scene_id=None, probe_response=None):  # noqa: E501
        """MetaInfo - a model defined in Swagger"""  # noqa: E501
        self._scene_id = None
        self._probe_response = None
        self.discriminator = None
        if scene_id is not None:
            self.scene_id = scene_id
        if probe_response is not None:
            self.probe_response = probe_response

    @property
    def scene_id(self):
        """Gets the scene_id of this MetaInfo.  # noqa: E501

        The scene ID, unique throughout the scenario  # noqa: E501

        :return: The scene_id of this MetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id):
        """Sets the scene_id of this MetaInfo.

        The scene ID, unique throughout the scenario  # noqa: E501

        :param scene_id: The scene_id of this MetaInfo.  # noqa: E501
        :type: str
        """

        self._scene_id = scene_id

    @property
    def probe_response(self):
        """Gets the probe_response of this MetaInfo.  # noqa: E501


        :return: The probe_response of this MetaInfo.  # noqa: E501
        :rtype: ProbeResponse
        """
        return self._probe_response

    @probe_response.setter
    def probe_response(self, probe_response):
        """Sets the probe_response of this MetaInfo.


        :param probe_response: The probe_response of this MetaInfo.  # noqa: E501
        :type: ProbeResponse
        """

        self._probe_response = probe_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
