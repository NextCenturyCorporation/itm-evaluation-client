# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.basic_character import BasicCharacter  # noqa: F401,E501

class Character(BasicCharacter):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unstructured_postassess': 'str',
        'has_blanket': 'bool',
        'intent': 'IntentEnum',
        'directness_of_causality': 'DirectnessEnum',
        'injuries': 'list[Injury]',
        'vitals': 'Vitals',
        'visited': 'bool',
        'tag': 'CharacterTagEnum'
    }
    if hasattr(BasicCharacter, "swagger_types"):
        swagger_types.update(BasicCharacter.swagger_types)

    attribute_map = {
        'unstructured_postassess': 'unstructured_postassess',
        'has_blanket': 'has_blanket',
        'intent': 'intent',
        'directness_of_causality': 'directness_of_causality',
        'injuries': 'injuries',
        'vitals': 'vitals',
        'visited': 'visited',
        'tag': 'tag'
    }
    if hasattr(BasicCharacter, "attribute_map"):
        attribute_map.update(BasicCharacter.attribute_map)

    def __init__(self, unstructured_postassess=None, has_blanket=False, intent=None, directness_of_causality=None, injuries=None, vitals=None, visited=False, tag=None, *args, **kwargs):  # noqa: E501
        """Character - a model defined in Swagger"""  # noqa: E501
        self._unstructured_postassess = None
        self._has_blanket = None
        self._intent = None
        self._directness_of_causality = None
        self._injuries = None
        self._vitals = None
        self._visited = None
        self._tag = None
        self.discriminator = None
        if unstructured_postassess is not None:
            self.unstructured_postassess = unstructured_postassess
        if has_blanket is not None:
            self.has_blanket = has_blanket
        if intent is not None:
            self.intent = intent
        if directness_of_causality is not None:
            self.directness_of_causality = directness_of_causality
        if injuries is not None:
            self.injuries = injuries
        if vitals is not None:
            self.vitals = vitals
        if visited is not None:
            self.visited = visited
        if tag is not None:
            self.tag = tag
        BasicCharacter.__init__(self, *args, **kwargs)

    @property
    def unstructured_postassess(self):
        """Gets the unstructured_postassess of this Character.  # noqa: E501

        unstructured description updated after character assessment  # noqa: E501

        :return: The unstructured_postassess of this Character.  # noqa: E501
        :rtype: str
        """
        return self._unstructured_postassess

    @unstructured_postassess.setter
    def unstructured_postassess(self, unstructured_postassess):
        """Sets the unstructured_postassess of this Character.

        unstructured description updated after character assessment  # noqa: E501

        :param unstructured_postassess: The unstructured_postassess of this Character.  # noqa: E501
        :type: str
        """

        self._unstructured_postassess = unstructured_postassess

    @property
    def has_blanket(self):
        """Gets the has_blanket of this Character.  # noqa: E501

        whether or not this character has a blanket (either wrapped around or underneath)  # noqa: E501

        :return: The has_blanket of this Character.  # noqa: E501
        :rtype: bool
        """
        return self._has_blanket

    @has_blanket.setter
    def has_blanket(self, has_blanket):
        """Sets the has_blanket of this Character.

        whether or not this character has a blanket (either wrapped around or underneath)  # noqa: E501

        :param has_blanket: The has_blanket of this Character.  # noqa: E501
        :type: bool
        """

        self._has_blanket = has_blanket

    @property
    def intent(self):
        """Gets the intent of this Character.  # noqa: E501


        :return: The intent of this Character.  # noqa: E501
        :rtype: IntentEnum
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this Character.


        :param intent: The intent of this Character.  # noqa: E501
        :type: IntentEnum
        """

        self._intent = intent

    @property
    def directness_of_causality(self):
        """Gets the directness_of_causality of this Character.  # noqa: E501


        :return: The directness_of_causality of this Character.  # noqa: E501
        :rtype: DirectnessEnum
        """
        return self._directness_of_causality

    @directness_of_causality.setter
    def directness_of_causality(self, directness_of_causality):
        """Sets the directness_of_causality of this Character.


        :param directness_of_causality: The directness_of_causality of this Character.  # noqa: E501
        :type: DirectnessEnum
        """

        self._directness_of_causality = directness_of_causality

    @property
    def injuries(self):
        """Gets the injuries of this Character.  # noqa: E501

        A list of Injuries for the character  # noqa: E501

        :return: The injuries of this Character.  # noqa: E501
        :rtype: list[Injury]
        """
        return self._injuries

    @injuries.setter
    def injuries(self, injuries):
        """Sets the injuries of this Character.

        A list of Injuries for the character  # noqa: E501

        :param injuries: The injuries of this Character.  # noqa: E501
        :type: list[Injury]
        """

        self._injuries = injuries

    @property
    def vitals(self):
        """Gets the vitals of this Character.  # noqa: E501


        :return: The vitals of this Character.  # noqa: E501
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals):
        """Sets the vitals of this Character.


        :param vitals: The vitals of this Character.  # noqa: E501
        :type: Vitals
        """

        self._vitals = vitals

    @property
    def visited(self):
        """Gets the visited of this Character.  # noqa: E501

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :return: The visited of this Character.  # noqa: E501
        :rtype: bool
        """
        return self._visited

    @visited.setter
    def visited(self, visited):
        """Sets the visited of this Character.

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :param visited: The visited of this Character.  # noqa: E501
        :type: bool
        """

        self._visited = visited

    @property
    def tag(self):
        """Gets the tag of this Character.  # noqa: E501


        :return: The tag of this Character.  # noqa: E501
        :rtype: CharacterTagEnum
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Character.


        :param tag: The tag of this Character.  # noqa: E501
        :type: CharacterTagEnum
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Character, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Character):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
