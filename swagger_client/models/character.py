# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Character(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unstructured': 'str',
        'name': 'str',
        'relationship': 'CharacterRelationship',
        'demographics': 'Demographics',
        'injuries': 'list[Injury]',
        'vitals': 'Vitals',
        'visited': 'bool',
        'tag': 'CharacterTag'
    }

    attribute_map = {
        'id': 'id',
        'unstructured': 'unstructured',
        'name': 'name',
        'relationship': 'relationship',
        'demographics': 'demographics',
        'injuries': 'injuries',
        'vitals': 'vitals',
        'visited': 'visited',
        'tag': 'tag'
    }

    def __init__(self, id=None, unstructured=None, name=None, relationship=None, demographics=None, injuries=None, vitals=None, visited=False, tag=None):  # noqa: E501
        """Character - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._unstructured = None
        self._name = None
        self._relationship = None
        self._demographics = None
        self._injuries = None
        self._vitals = None
        self._visited = None
        self._tag = None
        self.discriminator = None
        self.id = id
        self.unstructured = unstructured
        if name is not None:
            self.name = name
        if relationship is not None:
            self.relationship = relationship
        if demographics is not None:
            self.demographics = demographics
        if injuries is not None:
            self.injuries = injuries
        if vitals is not None:
            self.vitals = vitals
        if visited is not None:
            self.visited = visited
        if tag is not None:
            self.tag = tag

    @property
    def id(self):
        """Gets the id of this Character.  # noqa: E501

        string, globally unique character identifier  # noqa: E501

        :return: The id of this Character.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Character.

        string, globally unique character identifier  # noqa: E501

        :param id: The id of this Character.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def unstructured(self):
        """Gets the unstructured of this Character.  # noqa: E501

        natural language text description of the character  # noqa: E501

        :return: The unstructured of this Character.  # noqa: E501
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this Character.

        natural language text description of the character  # noqa: E501

        :param unstructured: The unstructured of this Character.  # noqa: E501
        :type: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def name(self):
        """Gets the name of this Character.  # noqa: E501

        the name of the character, omit if unknown  # noqa: E501

        :return: The name of this Character.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Character.

        the name of the character, omit if unknown  # noqa: E501

        :param name: The name of this Character.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def relationship(self):
        """Gets the relationship of this Character.  # noqa: E501


        :return: The relationship of this Character.  # noqa: E501
        :rtype: CharacterRelationship
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this Character.


        :param relationship: The relationship of this Character.  # noqa: E501
        :type: CharacterRelationship
        """

        self._relationship = relationship

    @property
    def demographics(self):
        """Gets the demographics of this Character.  # noqa: E501


        :return: The demographics of this Character.  # noqa: E501
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this Character.


        :param demographics: The demographics of this Character.  # noqa: E501
        :type: Demographics
        """

        self._demographics = demographics

    @property
    def injuries(self):
        """Gets the injuries of this Character.  # noqa: E501

        an array of character injuries  # noqa: E501

        :return: The injuries of this Character.  # noqa: E501
        :rtype: list[Injury]
        """
        return self._injuries

    @injuries.setter
    def injuries(self, injuries):
        """Sets the injuries of this Character.

        an array of character injuries  # noqa: E501

        :param injuries: The injuries of this Character.  # noqa: E501
        :type: list[Injury]
        """

        self._injuries = injuries

    @property
    def vitals(self):
        """Gets the vitals of this Character.  # noqa: E501


        :return: The vitals of this Character.  # noqa: E501
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals):
        """Sets the vitals of this Character.


        :param vitals: The vitals of this Character.  # noqa: E501
        :type: Vitals
        """

        self._vitals = vitals

    @property
    def visited(self):
        """Gets the visited of this Character.  # noqa: E501

        whether or not this character has been visited in the current scenario  # noqa: E501

        :return: The visited of this Character.  # noqa: E501
        :rtype: bool
        """
        return self._visited

    @visited.setter
    def visited(self, visited):
        """Sets the visited of this Character.

        whether or not this character has been visited in the current scenario  # noqa: E501

        :param visited: The visited of this Character.  # noqa: E501
        :type: bool
        """

        self._visited = visited

    @property
    def tag(self):
        """Gets the tag of this Character.  # noqa: E501


        :return: The tag of this Character.  # noqa: E501
        :rtype: CharacterTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Character.


        :param tag: The tag of this Character.  # noqa: E501
        :type: CharacterTag
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Character, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Character):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
