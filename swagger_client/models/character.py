# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Character(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'unstructured': 'str',
        'unstructured_postassess': 'str',
        'intent': 'IntentEnum',
        'directness_of_causality': 'DirectnessEnum',
        'rapport': 'RapportEnum',
        'demographics': 'Demographics',
        'injuries': 'list[Injury]',
        'vitals': 'Vitals',
        'visited': 'bool',
        'tag': 'CharacterTagEnum'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'unstructured': 'unstructured',
        'unstructured_postassess': 'unstructured_postassess',
        'intent': 'intent',
        'directness_of_causality': 'directness_of_causality',
        'rapport': 'rapport',
        'demographics': 'demographics',
        'injuries': 'injuries',
        'vitals': 'vitals',
        'visited': 'visited',
        'tag': 'tag'
    }

    def __init__(self, id=None, name=None, unstructured=None, unstructured_postassess=None, intent=None, directness_of_causality=None, rapport=None, demographics=None, injuries=None, vitals=None, visited=False, tag=None):  # noqa: E501
        """Character - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._unstructured = None
        self._unstructured_postassess = None
        self._intent = None
        self._directness_of_causality = None
        self._rapport = None
        self._demographics = None
        self._injuries = None
        self._vitals = None
        self._visited = None
        self._tag = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.unstructured = unstructured
        if unstructured_postassess is not None:
            self.unstructured_postassess = unstructured_postassess
        if intent is not None:
            self.intent = intent
        if directness_of_causality is not None:
            self.directness_of_causality = directness_of_causality
        if rapport is not None:
            self.rapport = rapport
        self.demographics = demographics
        if injuries is not None:
            self.injuries = injuries
        if vitals is not None:
            self.vitals = vitals
        if visited is not None:
            self.visited = visited
        if tag is not None:
            self.tag = tag

    @property
    def id(self):
        """Gets the id of this Character.  # noqa: E501

        A unique character ID throughout the scenario  # noqa: E501

        :return: The id of this Character.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Character.

        A unique character ID throughout the scenario  # noqa: E501

        :param id: The id of this Character.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Character.  # noqa: E501

        display name, as in a dashboard  # noqa: E501

        :return: The name of this Character.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Character.

        display name, as in a dashboard  # noqa: E501

        :param name: The name of this Character.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def unstructured(self):
        """Gets the unstructured of this Character.  # noqa: E501

        Natural language, plain text description of the character  # noqa: E501

        :return: The unstructured of this Character.  # noqa: E501
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this Character.

        Natural language, plain text description of the character  # noqa: E501

        :param unstructured: The unstructured of this Character.  # noqa: E501
        :type: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def unstructured_postassess(self):
        """Gets the unstructured_postassess of this Character.  # noqa: E501

        unstructured description updated after character assessment  # noqa: E501

        :return: The unstructured_postassess of this Character.  # noqa: E501
        :rtype: str
        """
        return self._unstructured_postassess

    @unstructured_postassess.setter
    def unstructured_postassess(self, unstructured_postassess):
        """Sets the unstructured_postassess of this Character.

        unstructured description updated after character assessment  # noqa: E501

        :param unstructured_postassess: The unstructured_postassess of this Character.  # noqa: E501
        :type: str
        """

        self._unstructured_postassess = unstructured_postassess

    @property
    def intent(self):
        """Gets the intent of this Character.  # noqa: E501


        :return: The intent of this Character.  # noqa: E501
        :rtype: IntentEnum
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this Character.


        :param intent: The intent of this Character.  # noqa: E501
        :type: IntentEnum
        """

        self._intent = intent

    @property
    def directness_of_causality(self):
        """Gets the directness_of_causality of this Character.  # noqa: E501


        :return: The directness_of_causality of this Character.  # noqa: E501
        :rtype: DirectnessEnum
        """
        return self._directness_of_causality

    @directness_of_causality.setter
    def directness_of_causality(self, directness_of_causality):
        """Sets the directness_of_causality of this Character.


        :param directness_of_causality: The directness_of_causality of this Character.  # noqa: E501
        :type: DirectnessEnum
        """

        self._directness_of_causality = directness_of_causality

    @property
    def rapport(self):
        """Gets the rapport of this Character.  # noqa: E501


        :return: The rapport of this Character.  # noqa: E501
        :rtype: RapportEnum
        """
        return self._rapport

    @rapport.setter
    def rapport(self, rapport):
        """Sets the rapport of this Character.


        :param rapport: The rapport of this Character.  # noqa: E501
        :type: RapportEnum
        """

        self._rapport = rapport

    @property
    def demographics(self):
        """Gets the demographics of this Character.  # noqa: E501


        :return: The demographics of this Character.  # noqa: E501
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this Character.


        :param demographics: The demographics of this Character.  # noqa: E501
        :type: Demographics
        """
        if demographics is None:
            raise ValueError("Invalid value for `demographics`, must not be `None`")  # noqa: E501

        self._demographics = demographics

    @property
    def injuries(self):
        """Gets the injuries of this Character.  # noqa: E501

        A list of Injuries for the character  # noqa: E501

        :return: The injuries of this Character.  # noqa: E501
        :rtype: list[Injury]
        """
        return self._injuries

    @injuries.setter
    def injuries(self, injuries):
        """Sets the injuries of this Character.

        A list of Injuries for the character  # noqa: E501

        :param injuries: The injuries of this Character.  # noqa: E501
        :type: list[Injury]
        """

        self._injuries = injuries

    @property
    def vitals(self):
        """Gets the vitals of this Character.  # noqa: E501


        :return: The vitals of this Character.  # noqa: E501
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals):
        """Sets the vitals of this Character.


        :param vitals: The vitals of this Character.  # noqa: E501
        :type: Vitals
        """

        self._vitals = vitals

    @property
    def visited(self):
        """Gets the visited of this Character.  # noqa: E501

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :return: The visited of this Character.  # noqa: E501
        :rtype: bool
        """
        return self._visited

    @visited.setter
    def visited(self, visited):
        """Sets the visited of this Character.

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :param visited: The visited of this Character.  # noqa: E501
        :type: bool
        """

        self._visited = visited

    @property
    def tag(self):
        """Gets the tag of this Character.  # noqa: E501


        :return: The tag of this Character.  # noqa: E501
        :rtype: CharacterTagEnum
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Character.


        :param tag: The tag of this Character.  # noqa: E501
        :type: CharacterTagEnum
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Character, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Character):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
