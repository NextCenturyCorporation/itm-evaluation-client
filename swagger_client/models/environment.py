# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Dry Run Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Environment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sim_environment': 'SimEnvironment',
        'decision_environment': 'DecisionEnvironment'
    }

    attribute_map = {
        'sim_environment': 'sim_environment',
        'decision_environment': 'decision_environment'
    }

    def __init__(self, sim_environment=None, decision_environment=None):  # noqa: E501
        """Environment - a model defined in Swagger"""  # noqa: E501
        self._sim_environment = None
        self._decision_environment = None
        self.discriminator = None
        self.sim_environment = sim_environment
        if decision_environment is not None:
            self.decision_environment = decision_environment

    @property
    def sim_environment(self):
        """Gets the sim_environment of this Environment.  # noqa: E501


        :return: The sim_environment of this Environment.  # noqa: E501
        :rtype: SimEnvironment
        """
        return self._sim_environment

    @sim_environment.setter
    def sim_environment(self, sim_environment):
        """Sets the sim_environment of this Environment.


        :param sim_environment: The sim_environment of this Environment.  # noqa: E501
        :type: SimEnvironment
        """
        if sim_environment is None:
            raise ValueError("Invalid value for `sim_environment`, must not be `None`")  # noqa: E501

        self._sim_environment = sim_environment

    @property
    def decision_environment(self):
        """Gets the decision_environment of this Environment.  # noqa: E501


        :return: The decision_environment of this Environment.  # noqa: E501
        :rtype: DecisionEnvironment
        """
        return self._decision_environment

    @decision_environment.setter
    def decision_environment(self, decision_environment):
        """Sets the decision_environment of this Environment.


        :param decision_environment: The decision_environment of this Environment.  # noqa: E501
        :type: DecisionEnvironment
        """

        self._decision_environment = decision_environment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Environment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
