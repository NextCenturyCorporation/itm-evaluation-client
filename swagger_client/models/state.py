# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.domain_state import DomainState  # noqa: F401,E501

class State(DomainState):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unstructured': 'str',
        'elapsed_time': 'int',
        'meta_info': 'MetaInfo',
        'events': 'list[Event]',
        'threat_state': 'ThreatState',
        'characters': 'list[Character]',
        'scenario_complete': 'bool'
    }
    if hasattr(DomainState, "swagger_types"):
        swagger_types.update(DomainState.swagger_types)

    attribute_map = {
        'unstructured': 'unstructured',
        'elapsed_time': 'elapsed_time',
        'meta_info': 'meta_info',
        'events': 'events',
        'threat_state': 'threat_state',
        'characters': 'characters',
        'scenario_complete': 'scenario_complete'
    }
    if hasattr(DomainState, "attribute_map"):
        attribute_map.update(DomainState.attribute_map)

    def __init__(self, unstructured=None, elapsed_time=None, meta_info=None, events=None, threat_state=None, characters=None, scenario_complete=None, *args, **kwargs):  # noqa: E501
        """State - a model defined in Swagger"""  # noqa: E501
        self._unstructured = None
        self._elapsed_time = None
        self._meta_info = None
        self._events = None
        self._threat_state = None
        self._characters = None
        self._scenario_complete = None
        self.discriminator = None
        self.unstructured = unstructured
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if meta_info is not None:
            self.meta_info = meta_info
        if events is not None:
            self.events = events
        if threat_state is not None:
            self.threat_state = threat_state
        self.characters = characters
        if scenario_complete is not None:
            self.scenario_complete = scenario_complete
        DomainState.__init__(self, *args, **kwargs)

    @property
    def unstructured(self):
        """Gets the unstructured of this State.  # noqa: E501

        Natural language, plain text description of a scene's state  # noqa: E501

        :return: The unstructured of this State.  # noqa: E501
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured):
        """Sets the unstructured of this State.

        Natural language, plain text description of a scene's state  # noqa: E501

        :param unstructured: The unstructured of this State.  # noqa: E501
        :type: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this State.  # noqa: E501

        The simulated elapsed time (in seconds) since the scenario started  # noqa: E501

        :return: The elapsed_time of this State.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this State.

        The simulated elapsed time (in seconds) since the scenario started  # noqa: E501

        :param elapsed_time: The elapsed_time of this State.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def meta_info(self):
        """Gets the meta_info of this State.  # noqa: E501


        :return: The meta_info of this State.  # noqa: E501
        :rtype: MetaInfo
        """
        return self._meta_info

    @meta_info.setter
    def meta_info(self, meta_info):
        """Sets the meta_info of this State.


        :param meta_info: The meta_info of this State.  # noqa: E501
        :type: MetaInfo
        """

        self._meta_info = meta_info

    @property
    def events(self):
        """Gets the events of this State.  # noqa: E501

        A list of scenario events to inform decision-making  # noqa: E501

        :return: The events of this State.  # noqa: E501
        :rtype: list[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this State.

        A list of scenario events to inform decision-making  # noqa: E501

        :param events: The events of this State.  # noqa: E501
        :type: list[Event]
        """

        self._events = events

    @property
    def threat_state(self):
        """Gets the threat_state of this State.  # noqa: E501


        :return: The threat_state of this State.  # noqa: E501
        :rtype: ThreatState
        """
        return self._threat_state

    @threat_state.setter
    def threat_state(self, threat_state):
        """Sets the threat_state of this State.


        :param threat_state: The threat_state of this State.  # noqa: E501
        :type: ThreatState
        """

        self._threat_state = threat_state

    @property
    def characters(self):
        """Gets the characters of this State.  # noqa: E501

        A list of characters in the scene  # noqa: E501

        :return: The characters of this State.  # noqa: E501
        :rtype: list[Character]
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this State.

        A list of characters in the scene  # noqa: E501

        :param characters: The characters of this State.  # noqa: E501
        :type: list[Character]
        """
        if characters is None:
            raise ValueError("Invalid value for `characters`, must not be `None`")  # noqa: E501

        self._characters = characters

    @property
    def scenario_complete(self):
        """Gets the scenario_complete of this State.  # noqa: E501

        set to true if the scenario is complete; subsequent calls involving that scenario will return an error code  # noqa: E501

        :return: The scenario_complete of this State.  # noqa: E501
        :rtype: bool
        """
        return self._scenario_complete

    @scenario_complete.setter
    def scenario_complete(self, scenario_complete):
        """Sets the scenario_complete of this State.

        set to true if the scenario is complete; subsequent calls involving that scenario will return an error code  # noqa: E501

        :param scenario_complete: The scenario_complete of this State.  # noqa: E501
        :type: bool
        """

        self._scenario_complete = scenario_complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(State, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, State):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
