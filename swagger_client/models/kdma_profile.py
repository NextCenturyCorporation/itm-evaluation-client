# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KDMAProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'computed_kdma_profile': 'list[KDMAValue]'
    }

    attribute_map = {
        'computed_kdma_profile': 'computed_kdma_profile'
    }

    def __init__(self, computed_kdma_profile=None):  # noqa: E501
        """KDMAProfile - a model defined in Swagger"""  # noqa: E501
        self._computed_kdma_profile = None
        self.discriminator = None
        self.computed_kdma_profile = computed_kdma_profile

    @property
    def computed_kdma_profile(self):
        """Gets the computed_kdma_profile of this KDMAProfile.  # noqa: E501


        :return: The computed_kdma_profile of this KDMAProfile.  # noqa: E501
        :rtype: list[KDMAValue]
        """
        return self._computed_kdma_profile

    @computed_kdma_profile.setter
    def computed_kdma_profile(self, computed_kdma_profile):
        """Sets the computed_kdma_profile of this KDMAProfile.


        :param computed_kdma_profile: The computed_kdma_profile of this KDMAProfile.  # noqa: E501
        :type: list[KDMAValue]
        """
        if computed_kdma_profile is None:
            raise ValueError("Invalid value for `computed_kdma_profile`, must not be `None`")  # noqa: E501

        self._computed_kdma_profile = computed_kdma_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KDMAProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KDMAProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
