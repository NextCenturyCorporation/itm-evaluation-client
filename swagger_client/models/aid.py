# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Dry Run Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Aid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'delay': 'float',
        'type': 'AidTypeEnum',
        'role': 'int',
        'patients_treated': 'list[MilitaryDispositionEnum]',
        'max_transport': 'int'
    }

    attribute_map = {
        'id': 'id',
        'delay': 'delay',
        'type': 'type',
        'role': 'role',
        'patients_treated': 'patients_treated',
        'max_transport': 'max_transport'
    }

    def __init__(self, id=None, delay=None, type=None, role=None, patients_treated=None, max_transport=None):  # noqa: E501
        """Aid - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._delay = None
        self._type = None
        self._role = None
        self._patients_treated = None
        self._max_transport = None
        self.discriminator = None
        self.id = id
        self.delay = delay
        if type is not None:
            self.type = type
        if role is not None:
            self.role = role
        if patients_treated is not None:
            self.patients_treated = patients_treated
        if max_transport is not None:
            self.max_transport = max_transport

    @property
    def id(self):
        """Gets the id of this Aid.  # noqa: E501

        An identifier for the aid opportunity, unique within the scene  # noqa: E501

        :return: The id of this Aid.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Aid.

        An identifier for the aid opportunity, unique within the scene  # noqa: E501

        :param id: The id of this Aid.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def delay(self):
        """Gets the delay of this Aid.  # noqa: E501

        Time until aid is available, in minutes; 0 means ready now  # noqa: E501

        :return: The delay of this Aid.  # noqa: E501
        :rtype: float
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this Aid.

        Time until aid is available, in minutes; 0 means ready now  # noqa: E501

        :param delay: The delay of this Aid.  # noqa: E501
        :type: float
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay

    @property
    def type(self):
        """Gets the type of this Aid.  # noqa: E501


        :return: The type of this Aid.  # noqa: E501
        :rtype: AidTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Aid.


        :param type: The type of this Aid.  # noqa: E501
        :type: AidTypeEnum
        """

        self._type = type

    @property
    def role(self):
        """Gets the role of this Aid.  # noqa: E501

        The characterization of health support for the distribution of medical resources and capabilities; Role 1 has higher capability than Role 4. See [health.mil](https://health.mil/Reference-Center/Glossary-Terms/2018/06/22/Roles-of-Medical-Care)   # noqa: E501

        :return: The role of this Aid.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Aid.

        The characterization of health support for the distribution of medical resources and capabilities; Role 1 has higher capability than Role 4. See [health.mil](https://health.mil/Reference-Center/Glossary-Terms/2018/06/22/Roles-of-Medical-Care)   # noqa: E501

        :param role: The role of this Aid.  # noqa: E501
        :type: int
        """

        self._role = role

    @property
    def patients_treated(self):
        """Gets the patients_treated of this Aid.  # noqa: E501

        A list of types of patients that can be helped; if omitted, then no restrictions or restrictions are irrelevant  # noqa: E501

        :return: The patients_treated of this Aid.  # noqa: E501
        :rtype: list[MilitaryDispositionEnum]
        """
        return self._patients_treated

    @patients_treated.setter
    def patients_treated(self, patients_treated):
        """Sets the patients_treated of this Aid.

        A list of types of patients that can be helped; if omitted, then no restrictions or restrictions are irrelevant  # noqa: E501

        :param patients_treated: The patients_treated of this Aid.  # noqa: E501
        :type: list[MilitaryDispositionEnum]
        """

        self._patients_treated = patients_treated

    @property
    def max_transport(self):
        """Gets the max_transport of this Aid.  # noqa: E501

        Maximum number of casualties that can be accommodated  # noqa: E501

        :return: The max_transport of this Aid.  # noqa: E501
        :rtype: int
        """
        return self._max_transport

    @max_transport.setter
    def max_transport(self, max_transport):
        """Sets the max_transport of this Aid.

        Maximum number of casualties that can be accommodated  # noqa: E501

        :param max_transport: The max_transport of this Aid.  # noqa: E501
        :type: int
        """

        self._max_transport = max_transport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Aid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Aid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
