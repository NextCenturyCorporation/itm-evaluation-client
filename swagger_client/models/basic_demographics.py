# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Phase 1 Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasicDemographics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'sex': 'DemographicSexEnum',
        'race': 'RaceEnum',
        'role': 'CharacterRoleEnum'
    }

    attribute_map = {
        'age': 'age',
        'sex': 'sex',
        'race': 'race',
        'role': 'role'
    }

    def __init__(self, age=None, sex=None, race=None, role=None):  # noqa: E501
        """BasicDemographics - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._sex = None
        self._race = None
        self._role = None
        self.discriminator = None
        if age is not None:
            self.age = age
        self.sex = sex
        self.race = race
        if role is not None:
            self.role = role

    @property
    def age(self):
        """Gets the age of this BasicDemographics.  # noqa: E501

        the age of the character, omit if unknown  # noqa: E501

        :return: The age of this BasicDemographics.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this BasicDemographics.

        the age of the character, omit if unknown  # noqa: E501

        :param age: The age of this BasicDemographics.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def sex(self):
        """Gets the sex of this BasicDemographics.  # noqa: E501


        :return: The sex of this BasicDemographics.  # noqa: E501
        :rtype: DemographicSexEnum
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this BasicDemographics.


        :param sex: The sex of this BasicDemographics.  # noqa: E501
        :type: DemographicSexEnum
        """
        if sex is None:
            raise ValueError("Invalid value for `sex`, must not be `None`")  # noqa: E501

        self._sex = sex

    @property
    def race(self):
        """Gets the race of this BasicDemographics.  # noqa: E501


        :return: The race of this BasicDemographics.  # noqa: E501
        :rtype: RaceEnum
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this BasicDemographics.


        :param race: The race of this BasicDemographics.  # noqa: E501
        :type: RaceEnum
        """
        if race is None:
            raise ValueError("Invalid value for `race`, must not be `None`")  # noqa: E501

        self._race = race

    @property
    def role(self):
        """Gets the role of this BasicDemographics.  # noqa: E501


        :return: The role of this BasicDemographics.  # noqa: E501
        :rtype: CharacterRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this BasicDemographics.


        :param role: The role of this BasicDemographics.  # noqa: E501
        :type: CharacterRoleEnum
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicDemographics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicDemographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
