# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProbeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'probe_id': 'str',
        'choice_id': 'str',
        'scenario_id': 'str',
        'justification': 'str'
    }

    attribute_map = {
        'probe_id': 'probe_id',
        'choice_id': 'choice_id',
        'scenario_id': 'scenario_id',
        'justification': 'justification'
    }

    def __init__(self, probe_id=None, choice_id=None, scenario_id=None, justification=None):  # noqa: E501
        """ProbeResponse - a model defined in Swagger"""  # noqa: E501
        self._probe_id = None
        self._choice_id = None
        self._scenario_id = None
        self._justification = None
        self.discriminator = None
        if probe_id is not None:
            self.probe_id = probe_id
        if choice_id is not None:
            self.choice_id = choice_id
        if scenario_id is not None:
            self.scenario_id = scenario_id
        if justification is not None:
            self.justification = justification

    @property
    def probe_id(self):
        """Gets the probe_id of this ProbeResponse.  # noqa: E501

        probe_id being responded to  # noqa: E501

        :return: The probe_id of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._probe_id

    @probe_id.setter
    def probe_id(self, probe_id):
        """Sets the probe_id of this ProbeResponse.

        probe_id being responded to  # noqa: E501

        :param probe_id: The probe_id of this ProbeResponse.  # noqa: E501
        :type: str
        """

        self._probe_id = probe_id

    @property
    def choice_id(self):
        """Gets the choice_id of this ProbeResponse.  # noqa: E501

        choice used to respond to probe  # noqa: E501

        :return: The choice_id of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this ProbeResponse.

        choice used to respond to probe  # noqa: E501

        :param choice_id: The choice_id of this ProbeResponse.  # noqa: E501
        :type: str
        """

        self._choice_id = choice_id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this ProbeResponse.  # noqa: E501

        current scenario id  # noqa: E501

        :return: The scenario_id of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this ProbeResponse.

        current scenario id  # noqa: E501

        :param scenario_id: The scenario_id of this ProbeResponse.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def justification(self):
        """Gets the justification of this ProbeResponse.  # noqa: E501

        justification for choice, if provided  # noqa: E501

        :return: The justification of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this ProbeResponse.

        justification for choice, if provided  # noqa: E501

        :param justification: The justification of this ProbeResponse.  # noqa: E501
        :type: str
        """

        self._justification = justification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProbeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProbeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
