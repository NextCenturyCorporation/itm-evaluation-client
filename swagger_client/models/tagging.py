# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the Dry Run Evaluation.  The API is based on the OpenAPI 3.0.3 specification.  # noqa: E501

    OpenAPI spec version: 0.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tagging(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'repeatable': 'bool',
        'probe_responses': 'list[ProbeResponses]',
        'reference': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'repeatable': 'repeatable',
        'probe_responses': 'probe_responses',
        'reference': 'reference'
    }

    def __init__(self, enabled=None, repeatable=None, probe_responses=None, reference=None):  # noqa: E501
        """Tagging - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._repeatable = None
        self._probe_responses = None
        self._reference = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if repeatable is not None:
            self.repeatable = repeatable
        if probe_responses is not None:
            self.probe_responses = probe_responses
        if reference is not None:
            self.reference = reference

    @property
    def enabled(self):
        """Gets the enabled of this Tagging.  # noqa: E501

        Whether tagging is enabled for the scene  # noqa: E501

        :return: The enabled of this Tagging.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Tagging.

        Whether tagging is enabled for the scene  # noqa: E501

        :param enabled: The enabled of this Tagging.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def repeatable(self):
        """Gets the repeatable of this Tagging.  # noqa: E501

        Whether probe responses should be sent each time a new tag is applied  # noqa: E501

        :return: The repeatable of this Tagging.  # noqa: E501
        :rtype: bool
        """
        return self._repeatable

    @repeatable.setter
    def repeatable(self, repeatable):
        """Sets the repeatable of this Tagging.

        Whether probe responses should be sent each time a new tag is applied  # noqa: E501

        :param repeatable: The repeatable of this Tagging.  # noqa: E501
        :type: bool
        """

        self._repeatable = repeatable

    @property
    def probe_responses(self):
        """Gets the probe_responses of this Tagging.  # noqa: E501

        A list of probe responses to send TA1 for each character-tag combination  # noqa: E501

        :return: The probe_responses of this Tagging.  # noqa: E501
        :rtype: list[ProbeResponses]
        """
        return self._probe_responses

    @probe_responses.setter
    def probe_responses(self, probe_responses):
        """Sets the probe_responses of this Tagging.

        A list of probe responses to send TA1 for each character-tag combination  # noqa: E501

        :param probe_responses: The probe_responses of this Tagging.  # noqa: E501
        :type: list[ProbeResponses]
        """

        self._probe_responses = probe_responses

    @property
    def reference(self):
        """Gets the reference of this Tagging.  # noqa: E501

        Re-use the tagging configuration from the specified scene index  # noqa: E501

        :return: The reference of this Tagging.  # noqa: E501
        :rtype: int
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Tagging.

        Re-use the tagging configuration from the specified scene index  # noqa: E501

        :param reference: The reference of this Tagging.  # noqa: E501
        :type: int
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tagging, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tagging):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
