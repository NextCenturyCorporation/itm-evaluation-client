# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.  # noqa: E501

    OpenAPI spec version: 0.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItmTa2EvalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apply_decompression_needle(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply a decompression needle to a casualty  # noqa: E501

        Treat the specified casualty with a decompression needle in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_decompression_needle(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_decompression_needle_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_decompression_needle_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
            return data

    def apply_decompression_needle_with_http_info(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply a decompression needle to a casualty  # noqa: E501

        Treat the specified casualty with a decompression needle in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_decompression_needle_with_http_info(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_decompression_needle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `apply_decompression_needle`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `apply_decompression_needle`")  # noqa: E501
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `apply_decompression_needle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/applyDecompressionNeedle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_hemostatic_gauze(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply hemostatic gauze to a casualty  # noqa: E501

        Treat the specified casualty with hemostatic gauze in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_hemostatic_gauze(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_hemostatic_gauze_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_hemostatic_gauze_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
            return data

    def apply_hemostatic_gauze_with_http_info(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply hemostatic gauze to a casualty  # noqa: E501

        Treat the specified casualty with hemostatic gauze in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_hemostatic_gauze_with_http_info(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_hemostatic_gauze" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `apply_hemostatic_gauze`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `apply_hemostatic_gauze`")  # noqa: E501
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `apply_hemostatic_gauze`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/applyHemostaticGauze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_nasal_trumpet(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Apply a nasal trumpet to a casualty  # noqa: E501

        Treat the specified casualty with a nasal trumpet in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_nasal_trumpet(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_nasal_trumpet_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_nasal_trumpet_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
            return data

    def apply_nasal_trumpet_with_http_info(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Apply a nasal trumpet to a casualty  # noqa: E501

        Treat the specified casualty with a nasal trumpet in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_nasal_trumpet_with_http_info(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_nasal_trumpet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `apply_nasal_trumpet`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `apply_nasal_trumpet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/applyNasalTrumpet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_pressure_bandage(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply a pressure bandage to a casualty  # noqa: E501

        Treat the specified casualty with a pressure bandage in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_pressure_bandage(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_pressure_bandage_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_pressure_bandage_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
            return data

    def apply_pressure_bandage_with_http_info(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply a pressure bandage to a casualty  # noqa: E501

        Treat the specified casualty with a pressure bandage in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_pressure_bandage_with_http_info(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_pressure_bandage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `apply_pressure_bandage`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `apply_pressure_bandage`")  # noqa: E501
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `apply_pressure_bandage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/applyPressureBandage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_tourniquet(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply a tourniquet to a casualty  # noqa: E501

        Treat the specified casualty with a tourniquet in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_tourniquet(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_tourniquet_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_tourniquet_with_http_info(session_id, casualty_id, location, **kwargs)  # noqa: E501
            return data

    def apply_tourniquet_with_http_info(self, session_id, casualty_id, location, **kwargs):  # noqa: E501
        """Apply a tourniquet to a casualty  # noqa: E501

        Treat the specified casualty with a tourniquet in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_tourniquet_with_http_info(session_id, casualty_id, location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to treat (required)
        :param str location: the injury location on the casualty's body (see Injury `location`) (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_tourniquet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `apply_tourniquet`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `apply_tourniquet`")  # noqa: E501
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `apply_tourniquet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/applyTourniquet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_treatment(self, session_id, casualty_id, tool, **kwargs):  # noqa: E501
        """Apply a treatment to a casualty  # noqa: E501

        Treat the specified casualty with the specified tool in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_treatment(session_id, casualty_id, tool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to tag (required)
        :param str tool: The tool to use to apply treatment (see Supplies) (required)
        :param str location: the injury location on the casualty's body (see Injury `location`)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_treatment_with_http_info(session_id, casualty_id, tool, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_treatment_with_http_info(session_id, casualty_id, tool, **kwargs)  # noqa: E501
            return data

    def apply_treatment_with_http_info(self, session_id, casualty_id, tool, **kwargs):  # noqa: E501
        """Apply a treatment to a casualty  # noqa: E501

        Treat the specified casualty with the specified tool in the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_treatment_with_http_info(session_id, casualty_id, tool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to tag (required)
        :param str tool: The tool to use to apply treatment (see Supplies) (required)
        :param str location: the injury location on the casualty's body (see Injury `location`)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'tool', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_treatment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `apply_treatment`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `apply_treatment`")  # noqa: E501
        # verify the required parameter 'tool' is set
        if ('tool' not in params or
                params['tool'] is None):
            raise ValueError("Missing the required parameter `tool` when calling `apply_treatment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'tool' in params:
            query_params.append(('tool', params['tool']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/applyTreatment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_vital(self, session_id, casualty_id, vital_sign, **kwargs):  # noqa: E501
        """Assess and retrieve a vital sign  # noqa: E501

        Retrieve the specified vital sign of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_vital(session_id, casualty_id, vital_sign, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to query (required)
        :param str vital_sign: The vital sign to retrieve, taken from controlled vocabulary (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_vital_with_http_info(session_id, casualty_id, vital_sign, **kwargs)  # noqa: E501
        else:
            (data) = self.check_vital_with_http_info(session_id, casualty_id, vital_sign, **kwargs)  # noqa: E501
            return data

    def check_vital_with_http_info(self, session_id, casualty_id, vital_sign, **kwargs):  # noqa: E501
        """Assess and retrieve a vital sign  # noqa: E501

        Retrieve the specified vital sign of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_vital_with_http_info(session_id, casualty_id, vital_sign, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to query (required)
        :param str vital_sign: The vital sign to retrieve, taken from controlled vocabulary (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'vital_sign']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_vital" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `check_vital`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `check_vital`")  # noqa: E501
        # verify the required parameter 'vital_sign' is set
        if ('vital_sign' not in params or
                params['vital_sign'] is None):
            raise ValueError("Missing the required parameter `vital_sign` when calling `check_vital`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'vital_sign' in params:
            query_params.append(('vital_sign', params['vital_sign']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkVital', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vitals',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_vitals(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Assess and retrieve all casualty vital signs  # noqa: E501

        Retrieve all vital signs of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_vitals(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to query (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_vitals_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_vitals_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
            return data

    def check_vitals_with_http_info(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Assess and retrieve all casualty vital signs  # noqa: E501

        Retrieve all vital signs of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_vitals_with_http_info(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to query (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_vitals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `check_vitals`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `check_vitals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkVitals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vitals',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def direct_to_safezone(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Direct casualties to the safe zone  # noqa: E501

        Verbally direct all mobile casualties to the safe zone  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.direct_to_safezone(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario to direct mobile casualties (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.direct_to_safezone_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.direct_to_safezone_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
            return data

    def direct_to_safezone_with_http_info(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Direct casualties to the safe zone  # noqa: E501

        Verbally direct all mobile casualties to the safe zone  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.direct_to_safezone_with_http_info(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario to direct mobile casualties (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method direct_to_safezone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `direct_to_safezone`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `direct_to_safezone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/{scenario_id}/directToSafezone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alignment_target(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Retrieve alignment target for the scenario  # noqa: E501

        Retrieve alignment target for the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alignment_target(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve alignment target (required)
        :return: AlignmentTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alignment_target_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alignment_target_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
            return data

    def get_alignment_target_with_http_info(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Retrieve alignment target for the scenario  # noqa: E501

        Retrieve alignment target for the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alignment_target_with_http_info(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve alignment target (required)
        :return: AlignmentTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alignment_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_alignment_target`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_alignment_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/getAlignmentTarget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlignmentTarget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_available_actions(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Get a list of currently available ADM actions  # noqa: E501

        Retrieve a list of currently available actions in the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_actions(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve avaialble actions (required)
        :return: list[Action]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_available_actions_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_available_actions_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
            return data

    def get_available_actions_with_http_info(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Get a list of currently available ADM actions  # noqa: E501

        Retrieve a list of currently available actions in the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_actions_with_http_info(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve avaialble actions (required)
        :return: list[Action]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_available_actions`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_available_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/{scenario_id}/getAvailableActions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Action]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_available_actions2(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Get a list of currently available ADM action types  # noqa: E501

        Retrieve a list of currently available actions in the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_actions2(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve avaialble actions (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_available_actions2_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_available_actions2_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
            return data

    def get_available_actions2_with_http_info(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Get a list of currently available ADM action types  # noqa: E501

        Retrieve a list of currently available actions in the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_actions2_with_http_info(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve avaialble actions (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_actions2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_available_actions2`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_available_actions2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/{scenario_id}/getAvailableActionTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_consciousness(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Check casualty consciousness  # noqa: E501

        Check the consciousness of the specified casualty  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consciousness(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to for which to check consciousness (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_consciousness_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_consciousness_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
            return data

    def get_consciousness_with_http_info(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Check casualty consciousness  # noqa: E501

        Check the consciousness of the specified casualty  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_consciousness_with_http_info(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to for which to check consciousness (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consciousness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_consciousness`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `get_consciousness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkConsciousness', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_heart_rate(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Check casualty heart rate  # noqa: E501

        Check the heart rate of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_heart_rate(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to for which to request heart rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_heart_rate_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_heart_rate_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
            return data

    def get_heart_rate_with_http_info(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Check casualty heart rate  # noqa: E501

        Check the heart rate of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_heart_rate_with_http_info(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to for which to request heart rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_heart_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_heart_rate`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `get_heart_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkHeartRate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_respiratory_rate(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Check casualty respiratory rate  # noqa: E501

        Check the respiratory rate of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_respiratory_rate(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to for which to request respiratory rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_respiratory_rate_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_respiratory_rate_with_http_info(session_id, casualty_id, **kwargs)  # noqa: E501
            return data

    def get_respiratory_rate_with_http_info(self, session_id, casualty_id, **kwargs):  # noqa: E501
        """Check casualty respiratory rate  # noqa: E501

        Check the respiratory rate of the specified casualty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_respiratory_rate_with_http_info(session_id, casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to for which to request respiratory rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_respiratory_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_respiratory_rate`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `get_respiratory_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkRespiratoryRate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scenario_state(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Retrieve scenario state  # noqa: E501

        Retrieve state of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scenario_state(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve status (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_scenario_state_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scenario_state_with_http_info(session_id, scenario_id, **kwargs)  # noqa: E501
            return data

    def get_scenario_state_with_http_info(self, session_id, scenario_id, **kwargs):  # noqa: E501
        """Retrieve scenario state  # noqa: E501

        Retrieve state of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scenario_state_with_http_info(session_id, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: The ID of the scenario for which to retrieve status (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scenario_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_scenario_state`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_scenario_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/{scenario_id}/getState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_scenario(self, session_id, **kwargs):  # noqa: E501
        """Get the next scenario  # noqa: E501

        Get the next scenario in a session with the specified ADM name, returning a Scenario object and unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_scenario(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: a scenario id to start, used internally by TA3
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_scenario_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_scenario_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def start_scenario_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get the next scenario  # noqa: E501

        Get the next scenario in a session with the specified ADM name, returning a Scenario object and unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_scenario_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str scenario_id: a scenario id to start, used internally by TA3
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `start_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/scenario', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_session(self, adm_name, session_type, **kwargs):  # noqa: E501
        """Start a new session  # noqa: E501

        Get unique session id for grouping answers from a collection of scenarios/probes together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_session(adm_name, session_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str adm_name: A self-assigned ADM name.  Can add authentication later. (required)
        :param str session_type: the type of session to start (`test`, `eval`, or a TA1 name) (required)
        :param int max_scenarios: the maximum number of scenarios requested, supported only in `test` sessions
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_session_with_http_info(adm_name, session_type, **kwargs)  # noqa: E501
        else:
            (data) = self.start_session_with_http_info(adm_name, session_type, **kwargs)  # noqa: E501
            return data

    def start_session_with_http_info(self, adm_name, session_type, **kwargs):  # noqa: E501
        """Start a new session  # noqa: E501

        Get unique session id for grouping answers from a collection of scenarios/probes together  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_session_with_http_info(adm_name, session_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str adm_name: A self-assigned ADM name.  Can add authentication later. (required)
        :param str session_type: the type of session to start (`test`, `eval`, or a TA1 name) (required)
        :param int max_scenarios: the maximum number of scenarios requested, supported only in `test` sessions
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adm_name', 'session_type', 'max_scenarios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adm_name' is set
        if ('adm_name' not in params or
                params['adm_name'] is None):
            raise ValueError("Missing the required parameter `adm_name` when calling `start_session`")  # noqa: E501
        # verify the required parameter 'session_type' is set
        if ('session_type' not in params or
                params['session_type'] is None):
            raise ValueError("Missing the required parameter `session_type` when calling `start_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'adm_name' in params:
            query_params.append(('adm_name', params['adm_name']))  # noqa: E501
        if 'session_type' in params:
            query_params.append(('session_type', params['session_type']))  # noqa: E501
        if 'max_scenarios' in params:
            query_params.append(('max_scenarios', params['max_scenarios']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/startSession', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tag_casualty(self, session_id, casualty_id, tag, **kwargs):  # noqa: E501
        """Tag a casualty with a triage category  # noqa: E501

        Apply a triage tag to the specified casualty with the specified tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_casualty(session_id, casualty_id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to tag (required)
        :param str tag: The tag to apply to the casualty, chosen from triage categories (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tag_casualty_with_http_info(session_id, casualty_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.tag_casualty_with_http_info(session_id, casualty_id, tag, **kwargs)  # noqa: E501
            return data

    def tag_casualty_with_http_info(self, session_id, casualty_id, tag, **kwargs):  # noqa: E501
        """Tag a casualty with a triage category  # noqa: E501

        Apply a triage tag to the specified casualty with the specified tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_casualty_with_http_info(session_id, casualty_id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param str casualty_id: The ID of the casualty to tag (required)
        :param str tag: The tag to apply to the casualty, chosen from triage categories (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'casualty_id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag_casualty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `tag_casualty`")  # noqa: E501
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `tag_casualty`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `tag_casualty`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def take_action(self, session_id, **kwargs):  # noqa: E501
        """Take an action within a scenario  # noqa: E501

        Take an action with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.take_action(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param Action body: Encapsulation of an action taken by a DM in the context of the scenario
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.take_action_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.take_action_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def take_action_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Take an action within a scenario  # noqa: E501

        Take an action with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.take_action_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: a unique session_id, as returned by /ta2/startSession (required)
        :param Action body: Encapsulation of an action taken by a DM in the context of the scenario
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method take_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `take_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/takeAction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
